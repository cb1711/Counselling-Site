import sys
from twisted.web.static import File
from twisted.python import log
from twisted.web.server import Site
from twisted.internet import reactor
from autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol
import datetime
from autobahn.twisted.resource import WebSocketResource
import MySQLdb
db=MySQLdb.connect("localhost","root","chaitanya1996*","counselling_site")
class SomeServerProtocol(WebSocketServerProtocol):
    def onConnect(self, request):
        print("some request connected {}".format(request))

    def onMessage(self, payload, isBinary):
        self.sendMessage("message received")

class SomeServerProtocol(WebSocketServerProtocol):
    def onOpen(self):
        self.factory.register(self)
        self.identified=False

    def connectionLost(self, reason):
	self.factory.communicate(self,"Your Partner is Offline",False)
        self.factory.unregister(self)
        self.identified=False

    def onMessage(self, payload, isBinary):
        print payload
        if not self.identified:
            self.factory.findPartner(self,payload)
            self.identified=True
	else:
            self.factory.communicate(self, payload, isBinary)

class CounsellingChatFactory(WebSocketServerFactory):
    def __init__(self, *args, **kwargs):
        super(CounsellingChatFactory, self).__init__(*args, **kwargs)
        self.clients = {}
        self.names={}
        self.addr={}
        self.cton={}
    def register(self, client):
        print client
        self.clients[client.peer] = {"object": client, "partner": None,"id":None,"recv_id":None}

    def unregister(self, client):
        self.clients.pop(client.peer)
	#self.names.pop(self.cton.pop(client))
	#self.addr.pop(self.cton.pop(client))
	#self.cton.pop(client)
		

    def findPartner(self,client,payload):
        try:
            cursor=db.cursor()
            li=str(payload).split(":")
            sender=li[0]
            to=li[1]
	    query="SELECT id FROM auth_user WHERE email='%s'"%(sender)
	 
	    cursor.execute(query)
           
	    id=cursor.fetchone()
            print id[0]
	    self.clients[client.peer]["id"]=id[0]
            
	    query="SELECT id FROM auth_user WHERE email='%s'"%(to)				
	    cursor.execute(query)
	    r_id=cursor.fetchone()
	    self.clients[client.peer]["recv_id"]=r_id[0]
            print r_id
            self.names[sender]=client.peer
            self.addr[sender]=to
            
            self.cton[client]=sender
        except:
	    pass
	try:
	    sender=self.cton[client]
	    to=self.addr[sender]
	    partner=self.clients[self.names[self.addr[sender]]]["object"]
            self.clients[self.names[self.addr[sender]]]["partner"] = client
            self.clients[client.peer]["partner"]=partner
        except:
            print("no partners for {} check in a moment".format(client.peer))
        

    def communicate(self, client, payload, isBinary):
        c = self.clients[client.peer]
	query="INSERT INTO  IT_message(Text,Date,Time,Receiver_id,Sender_id) VALUES('%s','%s','%s','%d','%d')"%(payload,datetime.date.today(),datetime.datetime.now().time(),c["id"],c["recv_id"])
	cursor.execute(query)
	
        if not c["partner"]:
            c["object"].sendMessage("Sorry you dont have partner yet, check back in a minute")
        else:
            try:
                self.clients[self.names[self.addr[self.cton[client]]]]
                c["partner"].sendMessage(payload)
            except:
                client.sendMessage(str(self.addr[self.cton[client]]+" is offline"))
	

if __name__ == "__main__":
	
    log.startLogging(sys.stdout)

    root = File(".")

    factory = CounsellingChatFactory(u"ws://192.168.1.4:8080")
    factory.protocol = SomeServerProtocol
    resource = WebSocketResource(factory)
    root.putChild(u"ws", resource)

    site = Site(root)
    reactor.listenTCP(8080, site)
    reactor.run()
